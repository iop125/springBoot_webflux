web反应式框架


Spring WebFlux是一个自底向上构建的非阻塞Web框架，用于利多核、下一代处理器并处理大量并发连接
j2ee7以上 同时不支持关系型数据库

Mono 表示包含0或1个元素的异步序列
    fromSupplier  提供者可以理解为返回  是函数编程里面的东西
Flux 表示可以包含0或多个元素的异步序列


SSE
规范是 HTML 5 规范的一个组成部分。该规范比较简单，主要由两个部分组成：
 服务端与浏览器之间的通讯协议
 浏览器 中 可供 JavaScript 使用的 EventSource 对象

（1） 通讯协议
这个
通讯协议是基于纯文本的简单协议。服务器端的响应内容类型 必须 是
“text/event stream” 。响应文本的内容是一个事件流，事件流是一个简单的文本流，仅支持
UTF 8 格式的编码。
事件流由不同的事件
组成。不同事件间通过仅包含回车符和换行符的空行（ r n”n”）来
分隔。
每个事件
可以由多行构成， 每 行 由类型和数据 两部分组成。类型与 数据通过 冒号（
进行分隔，冒号前的为类型，冒号后的为其对应的值。每个事件可以包含如下 类型 的行
 类型为空白，表示该行是注释，会在处理时被忽略。
 类型为 data ，表示该行 是事件所 包含的数据。以 data 开头的行可以出现多次。所有
这些行都是该事件的数据。
 类型为 event ，表示该行用来声明事件的类型 ，即事件名称 。浏览器在收到数据时，会
产生对应 名称 的事件。
 类型为 id ，表示该行用来声明事件的标识符。
 类型为 retry ，表示该行用来声明浏览器在连接断开之后进行 重连的等待时间

data:china // 该事件仅包含数据
data:Beijing // 该事件包含数据与事件标识
id: 100
event: myevent      // 该事件指定了名称
data:shanghai
id: 101
: this is a comment     // 该事件具有注释、名称，且包含两行数据
event:city
data:guangzhou
data:shenzhen

事件标识 id 有什么用呢？
如果服务
端 发送的事件 中包含 事件标识 id 那么 浏览器会 将 最近一次接收到的事件标识
id 记录到 HTTP 头 的 Last Event ID 属性中 。如果 浏览器与服务 端的连接中断，当浏览器再次
连接时，会 将 Last Event ID 记录的事件 标识 id 发送给服务端 。服务器端通过浏览器端发送
的事件标识 id 来确定 将 继续连接 哪个事件

EventSource 对象
    页面对于服务端
    发送的带有事件的 响应，浏览器需要在 JavaScript 中使用 EventSource 对象
    进行处理。 EventSource 使用的是标准的事件监听器方式 （注意，这里的事件并不是响应中
    所带的事件，而是浏览器上所 发生的事件）。当相应的事件发生时， 只需 使 EventSource 对象
    调用 相应的事件处理方法即可。 EventSource 提供了三个标准事件

     open  当浏览器成功与服务端建立连接时触发    onopen()
     message 当收到服务端发送的事件时触发   onmessage()  addEventListener()
     error   当发生异常时触发   onerror()
     例子
     servlet SSEServlet 页面：index.jsp




异步serlet
AsynchronousServlet
    步骤：
    1。在启动类上面加载 @ServletComponentScan和@EnableAsync注解
    2。倒入jar包
    3。extends HttpServlet
    4。asyncSupported = true
    5。获取异步上下文，开启异步操作
    6。设置异步时间
    7。获取非阻塞的异步请求和响应
    8。 CompletableFuture.runAsync(() -> doSome(asyncContext, servletRequest, servletResponse));执行

同步servlet
SynchronizationServlet

